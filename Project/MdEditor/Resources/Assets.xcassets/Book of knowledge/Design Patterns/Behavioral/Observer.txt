Суть паттерна заключается в том, что есть наблюдаемый объект (subject), который содержит список зависимых от него наблюдателей (observers). Когда состояние наблюдаемого объекта меняется, он автоматически уведомляет всех своих наблюдателей об этом изменении.

  

Давайте рассмотрим пример использования паттерна Observer на языке Swift с помощью Xcode. Представим, что у нас есть класс `Subject`, который представляет некоторый наблюдаемый объект:

  

class Subject {

    private var observers = [Observer]()

  

    func addObserver(_ observer: Observer) {

        observers.append(observer)

    }

  

    func removeObserver(_ observer: Observer) {

        observers = observers.filter { $0 !== observer }

    }

  

    func notifyObservers() {

        for observer in observers {

            observer.update()

        }

    }

  

    func doSomething() {

        // Выполняем некоторую логику и изменяем состояние объекта

        // Затем уведомляем всех наблюдателей об этом изменении

        notifyObservers()

    }

}

  

Здесь `Subject` содержит список наблюдателей (`observers`), а также методы `addObserver`, `removeObserver` и `notifyObservers`, которые позволяют добавлять, удалять и уведомлять наблюдателей соответственно.

  

Теперь давайте создадим класс `Observer`, который будет представлять наблюдателя:

  

class Observer {

    func update() {

        // Логика обработки уведомления от наблюдаемого объекта

    }

}

  

В методе `update` мы можем определить логику обработки уведомления от наблюдаемого объекта.

  

Наконец, мы можем использовать паттерн Observer, создавая экземпляры `Subject` и `Observer` и связывая их между собой:

  

let subject = Subject()

let observer1 = Observer()

let observer2 = Observer()

  

subject.addObserver(observer1)

subject.addObserver(observer2)

  

subject.doSomething() // Выполняем некоторую логику и уведомляем наблюдателей об изменении

  

subject.removeObserver(observer2)

  

subject.doSomething() // Выполняем еще одну логику и уведомляем только оставшегося наблюдателя

  

В этом примере мы создаем экземпляр `Subject` и два экземпляра `Observer`. Затем мы добавляем обоих наблюдателей к наблюдаемому объекту с помощью метода `addObserver`. После этого мы вызываем метод `doSomething`, который изменяет состояние наблюдаемого объекта и уведомляет всех наблюдателей об этом изменении. Затем мы удаляем одного из наблюдателей с помощью метода `removeObserver` и повторно вызываем `doSomething`, чтобы увидеть, что только оставшийся наблюдатель получает уведомление.

  

Таким образом, паттерн Observer позволяет реализовывать гибкую систему уведомлений и реакции на изменения состояния объектов. Он особенно полезен в ситуациях, когда объекты должны взаимодействовать без явной привязки друг к другу.